{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 1 - Family Linked List"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creating a doubly linked list with my family members as elements, details : {Name, Age, Relation} are included as node values."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating the node class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Making a class for node of doubly linked list.\n",
    "\n",
    "class Node:\n",
    "\n",
    "    def __init__(self, next=None, previous=None, name=None, relation=None, age=None):\n",
    "        \"\"\"Constructor to create a Node.\"\"\"\n",
    "        \n",
    "        # Initializing the node with the given values.\n",
    "        self.next = next                                            # Pointer to next node.\n",
    "        self.previous = previous                                    # Pointer to previous node.\n",
    "\n",
    "        # Data of the node.\n",
    "        self.data1 = name                                           # Name of the person.\n",
    "        self.data2 = relation                                       # Relation with the person.\n",
    "        self.data3 = age                                            # Age of the person.\n",
    "    def __del__(self):                                              # Destructor to delete the node.\n",
    "        pass    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating the class for Doubly Linked List(Family_DLL).\n",
    "\n",
    "- defining functions to insert nodes into the list and display the list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a class for doubly linked list.\n",
    "\n",
    "class Family_DLL:\n",
    "\n",
    "    def __init__(self) -> None:\n",
    "        \"\"\"Constructor to create a empty doubly linked list.\"\"\"\n",
    "    \n",
    "        self.head = None                                            # Head of the empty doubly linked list.\n",
    "\n",
    "    def add_front(self, name, relation, age):\n",
    "        \"\"\"Function to add a node at the front of the doubly linked list.\"\"\"\n",
    "\n",
    "        # Creating a new node and put the data in it.\n",
    "        new_node = Node(name=name, relation=relation, age=age)\n",
    "\n",
    "        new_node.next = self.head                                   # Making next of new node as head.\n",
    "\n",
    "        if self.head is not None:\n",
    "            self.head.prev = new_node                               # Changing previous of head node to new node.\n",
    "\n",
    "        self.head = new_node                                        # Moving the head to point to the new node.\n",
    "\n",
    "    def add_after(self, prev_node, name, relation, age):\n",
    "        \"\"\"Function to add a node after a given node.\"\"\"\n",
    "\n",
    "        # Checking if the given previous node exists.\n",
    "        if prev_node is None:\n",
    "            print(\"The given previous node must be in DLL.\")\n",
    "            return\n",
    "\n",
    "        # Creating a new node and put the data in it.\n",
    "        new_node = Node(name=name, relation=relation, age=age)\n",
    "\n",
    "        new_node.next = prev_node.next                              # Making next of new node as next of previous node.\n",
    "        prev_node.next = new_node                                   # Making next of previous node as new node.\n",
    "        new_node.previous = prev_node                               # Making previous of new node as previous node.\n",
    "        if new_node.next is not None:\n",
    "            new_node.next.previous = new_node                       # Changing previous of new node's next node.\n",
    "\n",
    "    def add(self, name, relation, age):\n",
    "        \"\"\"Function to add a node at the back of the doubly linked list.\"\"\"\n",
    "\n",
    "        # Creating a new node and put the data in it.\n",
    "        new_node = Node(name=name, relation=relation, age=age)\n",
    "\n",
    "        last = self.head                                            # Initializing the last node as head.\n",
    "\n",
    "        new_node.next = None                                        # Making next of new node as None.\n",
    "\n",
    "        if self.head is None:                                       # If the DLL is empty, then make the new node as head.\n",
    "            new_node.previous = None\n",
    "            self.head = new_node\n",
    "            return\n",
    "\n",
    "        while last.next is not None:                                # Else traverse till the last node.\n",
    "            last = last.next\n",
    "\n",
    "        last.next = new_node                                        # Change the next of last node.\n",
    "        new_node.previous = last                                    # Make last node as previous of new node.\n",
    "\n",
    "        return\n",
    "\n",
    "    def printDLL(self, node):\n",
    "        \"\"\"Function to print the doubly linked list.\"\"\"\n",
    "\n",
    "        strng = \"My Family: \"                                       # String to store the family members.\n",
    "\n",
    "        # Traversing the doubly linked list.\n",
    "        while node is not None:    \n",
    "            strng += f\"<==> [Name: {node.data1}, Relation: {node.data2}, Age: {node.data3}] \"   # Adding the data of the node to the string.\n",
    "            \n",
    "            # Moving to the next node.\n",
    "            last = node\n",
    "            node = node.next\n",
    "\n",
    "        print(strng)                                                # Printing the string.\n",
    "\n",
    "    def __del__(self):                                              # Destructor to delete the doubly linked list.\n",
    "        pass\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating the Doubly Linked List"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "family = Family_DLL()                                               # Creating a doubly linked list representing my Family.\n",
    "\n",
    "# Adding the parents of the family.\n",
    "\n",
    "family.add_front(\"Prakash Chand Meena\", \"Father\", 56)\n",
    "family.add(\"Vimla Meena\", \"Mother\", 52)\n",
    "\n",
    "# Adding the siblings of the family.\n",
    "family.add_after(family.head,\"Manobal Singh Bagady\", \"Me\", 18)\n",
    "family.add_after(family.head.next,\"Kushal Meena\", \"Sister\", 28)\n",
    "\n",
    "# Adding the spouses of the siblings of the family.\n",
    "family.add_after(family.head.next,\"Ashok Meena\", \"Brother-in-Law\", 32)\n",
    "\n",
    "# Adding the children of the siblings.\n",
    "family.add_after(family.head.next.next,\"Kuvika\", \"Niece\", 2)\n",
    "family.add_after(family.head.next.next.next,\"Kunal\", \"Nephew\", 2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Printing the Family Doubly Linked List"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My Family: <==> [Name: Prakash Chand Meena, Relation: Father, Age: 56] <==> [Name: Manobal Singh Bagady, Relation: Me, Age: 18] <==> [Name: Ashok Meena, Relation: Brother-in-Law, Age: 32] <==> [Name: Kuvika, Relation: Niece, Age: 2] <==> [Name: Kunal, Relation: Nephew, Age: 2] <==> [Name: Kushal Meena, Relation: Sister, Age: 28] <==> [Name: Vimla Meena, Relation: Mother, Age: 52] \n"
     ]
    }
   ],
   "source": [
    "family.printDLL(family.head)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Way to Link the family members' doubly-linked list based on their relationship:\n",
    "  - Parent(Male) <=> Children <==> Children of Children <==> Spouses of Children  <==> Parent(Female)\n",
    "  \n",
    "  - To Achieve this using Linked List is not possible because it is a linear data structure, but we can achieve this using tree/graph data structure.\n",
    "            \n",
    "      <img src=\"https://scaler-topics-articles-md.s3.us-west-2.amazonaws.com/what-is-tree-in-data-structure.webp\" width=400 height=551>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.10.6 64-bit",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "26de051ba29f2982a8de78e945f0abaf191376122a1563185a90213a26c5da77"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}